{"customTypeDefs":{"UserResponse":{"name":"UserResponse","type":"Object","description":"","properties":[{"name":"id","type":"string","description":"Id of the user:","required":false,"_type":"_TypeDefProperty"},{"name":"firstName","type":"string","description":"The first name of the user.","required":false,"_type":"_TypeDefProperty"},{"name":"lastName","type":"string","description":"The last name of the user","required":false,"_type":"_TypeDefProperty"},{"name":"middleName","type":["string","null"],"description":"the middle name of the user.","_type":"_TypeDefProperty"},{"name":"email","type":"string","description":"the email of the user.","required":false,"_type":"_TypeDefProperty"},{"name":"roles","type":"string","description":"","required":true,"_type":"_TypeDefArrayProperty","params":[{"name":"roles","type":"string","description":"the roles of the user.","required":false,"_type":"_Paramter"}]},{"name":"scopes","type":"string","description":"","required":true,"_type":"_TypeDefArrayProperty","params":[{"name":"scopes","type":"string","description":"the scopes of the roles of the user.","required":false,"_type":"_Paramter"}]}],"_type":"_TypeDef"},"GetProfilesByQueryRequestFilter":{"name":"GetProfilesByQueryRequestFilter","type":"object","description":"mongodb like filtering object in a String: Number fashion: firstName: 0 to exclude & firstName: 1 to include.","properties":[{"name":"id","type":"number","description":"Just an example property.","required":false,"_type":"_TypeDefProperty"}],"_type":"_TypeDef"},"GetProfilesByQueryRequestSort":{"name":"GetProfilesByQueryRequestSort","type":"object","description":"mongodb like sort object in a String: Number fashion, e.g. { id: 1} to sort by id.","properties":[{"name":"id","type":"number","description":"Just an example property.","required":false,"_type":"_TypeDefProperty"}],"_type":"_TypeDef"},"UserListResponse":{"name":"UserListResponse","type":"Object","description":"A fruster user. Without any custom fields:","properties":[{"name":"id","type":"string","description":"Id of the user:","required":false,"_type":"_TypeDefProperty"},{"name":"firstName","type":"string","description":"The first name of the user.","required":false,"_type":"_TypeDefProperty"},{"name":"lastName","type":"string","description":"The last name of the user","required":false,"_type":"_TypeDefProperty"},{"name":"middleName","type":["string","null"],"description":"the middle name of the user.","_type":"_TypeDefProperty"},{"name":"email","type":"string","description":"the email of the user.","required":false,"_type":"_TypeDefProperty"},{"name":"roles","type":"string","description":"","required":true,"_type":"_TypeDefArrayProperty","params":[{"name":"roles","type":"string","description":"the roles of the user.","required":false,"_type":"_Paramter"}]},{"name":"scopes","type":"string","description":"","required":true,"_type":"_TypeDefArrayProperty","params":[{"name":"scopes","type":"string","description":"the scopes of the roles of the user.","required":false,"_type":"_Paramter"}]}],"_type":"_TypeDef"},"GetUsersByQueryRequestFilter":{"name":"GetUsersByQueryRequestFilter","type":"object","description":"mongodb like filtering object in a String: Number fashion: firstName: 0 to exclude & firstName: 1 to include.","properties":[{"name":"id","type":"number","description":"Just an example property.","required":false,"_type":"_TypeDefProperty"}],"_type":"_TypeDef"},"GetUsersByQueryRequestSort":{"name":"GetUsersByQueryRequestSort","type":"object","description":"mongodb like sort object in a String: Number fashion, e.g. { id: 1} to sort by id.","properties":[{"name":"id","type":"number","description":"Just an example property.","required":false,"_type":"_TypeDefProperty"}],"_type":"_TypeDef"},"GetUsersByQueryResponseUsers":{"name":"GetUsersByQueryResponseUsers","type":"Object","description":"A fruster user. Without any custom fields:","properties":[{"name":"id","type":"string","description":"Id of the user:","required":false,"_type":"_TypeDefProperty"},{"name":"firstName","type":"string","description":"The first name of the user.","required":false,"_type":"_TypeDefProperty"},{"name":"lastName","type":"string","description":"The last name of the user","required":false,"_type":"_TypeDefProperty"},{"name":"middleName","type":["string","null"],"description":"the middle name of the user.","_type":"_TypeDefProperty"},{"name":"email","type":"string","description":"the email of the user.","required":false,"_type":"_TypeDefProperty"},{"name":"roles","type":"string","description":"","required":true,"_type":"_TypeDefArrayProperty","params":[{"name":"roles","type":"string","description":"the roles of the user.","required":false,"_type":"_Paramter"}]},{"name":"scopes","type":"string","description":"","required":true,"_type":"_TypeDefArrayProperty","params":[{"name":"scopes","type":"string","description":"the scopes of the roles of the user.","required":false,"_type":"_Paramter"}]}],"_type":"_TypeDef"},"GetUsersByQueryResponse":{"name":"GetUsersByQueryResponse","type":"Object","description":"","properties":[{"name":"totalCount","type":"number","description":"The total count of results in the databse found with provided query","required":false,"_type":"_TypeDefProperty"},{"name":"users","type":"GetUsersByQueryResponseUsers","description":"Response with an array of users.","required":true,"_type":"_TypeDefArrayProperty","params":[{"name":"id","type":"string","description":"Id of the user:","required":false,"_type":"_Paramter"},{"name":"firstName","type":"string","description":"The first name of the user.","required":false,"_type":"_Paramter"},{"name":"lastName","type":"string","description":"The last name of the user","required":false,"_type":"_Paramter"},{"name":"middleName","type":["string","null"],"description":"the middle name of the user.","_type":"_Paramter"},{"name":"email","type":"string","description":"the email of the user.","required":false,"_type":"_Paramter"},{"name":"roles","type":"string","description":"","required":true,"_type":"_ArrayParamter","params":[{"name":"roles","type":"string","description":"the roles of the user.","required":false,"_type":"_Paramter"}]},{"name":"scopes","type":"string","description":"","required":true,"_type":"_ArrayParamter","params":[{"name":"scopes","type":"string","description":"the scopes of the roles of the user.","required":false,"_type":"_Paramter"}]}]}],"_type":"_TypeDef"},"VerifyEmailAddressResponse":{"name":"VerifyEmailAddressResponse","type":"Object","description":"","properties":[{"name":"verifiedEmail","type":"string","description":"The verified email.","required":true,"_type":"_TypeDefProperty"}],"_type":"_TypeDef"}},"endpoints":[{"endpointName":"addRoles","urlConstant":"UserServiceClient.endpoints.ADD_ROLES","description":"Adds inputted roles to specified user. Can only add roles existing in configuration. Response has status code `202` if successful.","returnType":null,"params":[{"name":"reqId","type":"string","description":"the request id","required":true,"_type":"_Paramter"},{"name":"id","type":"string","description":"Id of the user to add/remove roles to/from:","required":true,"_type":"_Paramter"},{"name":"roles","type":"string","description":"An array of roles to add/remove to/from the user. The list must contain valid roles, the same as those configured.","required":true,"_type":"_ArrayParamter","params":[{"name":"roles","type":"string","description":"A role, for instance \"admin\"","required":false,"_type":"_Paramter"}]}],"_type":"_Endpoint"},{"endpointName":"createUser","urlConstant":"UserServiceClient.endpoints.CREATE_USER","description":"Creates a fruster user. Must include a few base fields but can contain any number of custom fields. Response has status code `201` if successful. Automatically splits data between user and profile if configured to.","returnType":"UserResponse","params":[{"name":"reqId","type":"string","description":"the request id","required":true,"_type":"_Paramter"},{"name":"email","type":"string","description":"The email of the user:","required":true,"_type":"_Paramter"},{"name":"password","type":"string","description":"the password of the user. Is required only if `config.requirePassword` is set to true.","required":false,"_type":"_Paramter"},{"name":"firstName","type":"string","description":"The first name of the user:","required":true,"_type":"_Paramter"},{"name":"middleName","type":"string","description":"The middle name of the user :","required":false,"_type":"_Paramter"},{"name":"lastName","type":"string","description":"The last name of the user.:","required":true,"_type":"_Paramter"}],"_type":"_Endpoint"},{"endpointName":"deleteUser","urlConstant":"UserServiceClient.endpoints.DELETE_USER","description":"Deletes a user. Response has status code `200` if successful. `pub.user-service.user-deleted` is published after deletion","returnType":null,"params":[{"name":"reqId","type":"string","description":"the request id","required":true,"_type":"_Paramter"},{"name":"id","type":"string","description":"The id of the user to delete.:","required":true,"_type":"_Paramter"}],"_type":"_Endpoint"},{"endpointName":"getProfilesByQuery","urlConstant":"UserServiceClient.endpoints.GET_PROFILES_BY_QUERY","description":"Gets profiles by query. Return data may vary depending on the configuration.","returnType":null,"params":[{"name":"reqId","type":"string","description":"the request id","required":true,"_type":"_Paramter"},{"name":"query","type":"object","description":"mongodb like query object in a String: any fashion, e.g. { id: { $in: ['7a967d8b-8a25-4d20-b0e9-8ebe9383d488', '9f6b47c0-628c-45ca-8c43-8a99bf37e241'] }} to get users with ids '7a967d8b-8a25-4d20-b0e9-8ebe9383d488' and '9f6b47c0-628c-45ca-8c43-8a99bf37e241.'","required":true,"_type":"_Paramter"},{"name":"filter","type":"GetProfilesByQueryRequestFilter","description":"mongodb like filtering object in a String: Number fashion: firstName: 0 to exclude & firstName: 1 to include.","required":false,"_type":"_Paramter"},{"name":"start","type":"number","description":"Index to start results from.","required":false,"_type":"_Paramter"},{"name":"limit","type":"number","description":"Number of results.","required":false,"_type":"_Paramter"},{"name":"sort","type":"GetProfilesByQueryRequestSort","description":"mongodb like sort object in a String: Number fashion, e.g. { id: 1} to sort by id.","required":false,"_type":"_Paramter"}],"_type":"_Endpoint"},{"endpointName":"getScopes","urlConstant":"UserServiceClient.endpoints.GET_SCOPES","description":"Gets all scopes for specified roles in a flat array. E.g. input ['admin', 'user', 'super-admin'] would return  ['*', 'admin.*', 'profile.get']. Response has status code` 20`0 if successful.","returnType":"string","params":[{"name":"reqId","type":"string","description":"the request id","required":true,"_type":"_Paramter"}],"_type":"_Endpoint"},{"endpointName":"getUser","urlConstant":"UserServiceClient.endpoints.GET_USER","description":"Gets users by query. Response has status code `200` if successful.","returnType":"UserListResponse","params":[{"name":"reqId","type":"string","description":"the request id","required":true,"_type":"_Paramter"}],"deprecatedReason":"Use user-service.get-users-by-query instead.","_type":"_Endpoint"},{"endpointName":"getUsersByQuery","urlConstant":"UserServiceClient.endpoints.GET_USERS_BY_QUERY","description":"Gets users by query. Return data may vary depending on the configuration. \n\n Can be expanded to return both user and profile data using `expand: \"profile\"` if configured to split the data. If expand is used; the query can be used to query profile fields as well: `{ \"profile.firstName\": \"Bob\" }`. With expand; the data is returned `{...userData, profile: {...profileData}}`","returnType":"GetUsersByQueryResponse","params":[{"name":"reqId","type":"string","description":"the request id","required":true,"_type":"_Paramter"},{"name":"query","type":"object","description":"mongodb like query object in a String: any fashion, e.g. { id: { $in: ['7a967d8b-8a25-4d20-b0e9-8ebe9383d488', '9f6b47c0-628c-45ca-8c43-8a99bf37e241'] }} to get users with ids '7a967d8b-8a25-4d20-b0e9-8ebe9383d488' and '9f6b47c0-628c-45ca-8c43-8a99bf37e241.'","required":true,"_type":"_Paramter"},{"name":"filter","type":"GetUsersByQueryRequestFilter","description":"mongodb like filtering object in a String: Number fashion: firstName: 0 to exclude & firstName: 1 to include.","required":false,"_type":"_Paramter"},{"name":"start","type":"number","description":"Index to start results from.","required":false,"_type":"_Paramter"},{"name":"limit","type":"number","description":"Number of results.","required":false,"_type":"_Paramter"},{"name":"sort","type":"GetUsersByQueryRequestSort","description":"mongodb like sort object in a String: Number fashion, e.g. { id: 1} to sort by id.","required":false,"_type":"_Paramter"},{"name":"expand","type":"string","description":"Whether or not to expand user object with its profile.","required":false,"_type":"_Paramter"}],"_type":"_Endpoint"},{"endpointName":"removeRoles","urlConstant":"UserServiceClient.endpoints.REMOVE_ROLES","description":"Removes inputted roles from specified user. Cannot remove the last role. Response has status code `202` if successful.","returnType":null,"params":[{"name":"reqId","type":"string","description":"the request id","required":true,"_type":"_Paramter"},{"name":"id","type":"string","description":"Id of the user to add/remove roles to/from:","required":true,"_type":"_Paramter"},{"name":"roles","type":"string","description":"An array of roles to add/remove to/from the user. The list must contain valid roles, the same as those configured.","required":true,"_type":"_ArrayParamter","params":[{"name":"roles","type":"string","description":"A role, for instance \"admin\"","required":false,"_type":"_Paramter"}]}],"_type":"_Endpoint"},{"endpointName":"resendVerification","urlConstant":"UserServiceClient.endpoints.RESEND_VERIFICATION","description":"Generates a new email verification token and resends email w/ token to the provided user. Response has status code `200` if successful.","returnType":null,"params":[{"name":"reqId","type":"string","description":"the request id","required":true,"_type":"_Paramter"},{"name":"email","type":"string","description":"The email address to resent the verification email to.","required":false,"_type":"_Paramter"}],"_type":"_Endpoint"},{"endpointName":"setPassword","urlConstant":"UserServiceClient.endpoints.SET_PASSWORD","description":"Sets password of a user. Used by password reset service. Note: Updating a user's password should be done w/ the update-password endpoint. Response has status code `202` if successful.","returnType":null,"params":[{"name":"reqId","type":"string","description":"the request id","required":true,"_type":"_Paramter"},{"name":"id","type":"string","description":"Id of the user to set password for.","required":true,"_type":"_Paramter"},{"name":"newPassword","type":"string","description":"The new password to set for the user.","required":true,"_type":"_Paramter"}],"_type":"_Endpoint"},{"endpointName":"updatePassword","urlConstant":"UserServiceClient.endpoints.UPDATE_PASSWORD","description":"Updates password of an account. Requires to validation of old password before new can be set. Response has status code `202` if successful.","returnType":null,"params":[{"name":"reqId","type":"string","description":"the request id","required":true,"_type":"_Paramter"},{"name":"newPassword","type":"string","description":"The new password to update with.","required":true,"_type":"_Paramter"},{"name":"oldPassword","type":"string","description":"The old password of the user, requires this to be validated against the account details.","required":true,"_type":"_Paramter"},{"name":"id","type":"string","description":"The id of the user to update password for.","required":true,"_type":"_Paramter"}],"_type":"_Endpoint"},{"endpointName":"updateProfile","urlConstant":"UserServiceClient.endpoints.UPDATE_PROFILE","description":"Updates a user. Can contain any number of custom fields. Response has status code `200` if successful. ","returnType":null,"params":[{"name":"reqId","type":"string","description":"the request id","required":true,"_type":"_Paramter"},{"name":"id","type":"string","description":"Id of the user:","required":true,"_type":"_Paramter"},{"name":"firstName","type":"string","description":"The first name of the user.","required":false,"_type":"_Paramter"},{"name":"lastName","type":"string","description":"The last name of the user","required":false,"_type":"_Paramter"},{"name":"middleName","type":["string","null"],"description":"the middle name of the user.","_type":"_Paramter"},{"name":"email","type":"string","description":"the email of the user.","required":false,"_type":"_Paramter"}],"_type":"_Endpoint"},{"endpointName":"updateUser","urlConstant":"UserServiceClient.endpoints.UPDATE_USER","description":"Updates a user. Can contain any number of custom fields. Response has status code `200` if successful. ","returnType":{"name":"UserResponse","type":"Object","description":"","properties":[{"name":"id","type":"string","description":"Id of the user:","required":false,"_type":"_TypeDefProperty"},{"name":"firstName","type":"string","description":"The first name of the user.","required":false,"_type":"_TypeDefProperty"},{"name":"lastName","type":"string","description":"The last name of the user","required":false,"_type":"_TypeDefProperty"},{"name":"middleName","type":["string","null"],"description":"the middle name of the user.","_type":"_TypeDefProperty"},{"name":"email","type":"string","description":"the email of the user.","required":false,"_type":"_TypeDefProperty"},{"name":"roles","type":"string","description":"","required":true,"_type":"_TypeDefArrayProperty","params":[{"name":"roles","type":"string","description":"the roles of the user.","required":false,"_type":"_Paramter"}]},{"name":"scopes","type":"string","description":"","required":true,"_type":"_TypeDefArrayProperty","params":[{"name":"scopes","type":"string","description":"the scopes of the roles of the user.","required":false,"_type":"_Paramter"}]}],"_type":"_TypeDef"},"params":[{"name":"reqId","type":"string","description":"the request id","required":true,"_type":"_Paramter"},{"name":"id","type":"string","description":"Id of the user:","required":true,"_type":"_Paramter"},{"name":"firstName","type":"string","description":"The first name of the user.","required":false,"_type":"_Paramter"},{"name":"lastName","type":"string","description":"The last name of the user","required":false,"_type":"_Paramter"},{"name":"middleName","type":["string","null"],"description":"the middle name of the user.","_type":"_Paramter"},{"name":"email","type":"string","description":"the email of the user.","required":false,"_type":"_Paramter"}],"_type":"_Endpoint"},{"endpointName":"validatePassword","urlConstant":"UserServiceClient.endpoints.VALIDATE_PASSWORD","description":"Validates that inputted password becomes the same hash as for an account. Typically used by auth service for login. Response has status code `200` if successful.","returnType":{"name":"UserResponse","type":"Object","description":"","properties":[{"name":"id","type":"string","description":"Id of the user:","required":false,"_type":"_TypeDefProperty"},{"name":"firstName","type":"string","description":"The first name of the user.","required":false,"_type":"_TypeDefProperty"},{"name":"lastName","type":"string","description":"The last name of the user","required":false,"_type":"_TypeDefProperty"},{"name":"middleName","type":["string","null"],"description":"the middle name of the user.","_type":"_TypeDefProperty"},{"name":"email","type":"string","description":"the email of the user.","required":false,"_type":"_TypeDefProperty"},{"name":"roles","type":"string","description":"","required":true,"_type":"_TypeDefArrayProperty","params":[{"name":"roles","type":"string","description":"the roles of the user.","required":false,"_type":"_Paramter"}]},{"name":"scopes","type":"string","description":"","required":true,"_type":"_TypeDefArrayProperty","params":[{"name":"scopes","type":"string","description":"the scopes of the roles of the user.","required":false,"_type":"_Paramter"}]}],"_type":"_TypeDef"},"params":[{"name":"reqId","type":"string","description":"the request id","required":true,"_type":"_Paramter"},{"name":"username","type":"string","description":"The username of the account to validate. Determined by config.USERNAME_VALIDATION_DB_FIELD.","required":true,"_type":"_Paramter"},{"name":"password","type":"string","description":"The password to validate against account with.","required":true,"_type":"_Paramter"}],"_type":"_Endpoint"},{"endpointName":"verifyEmail","urlConstant":"UserServiceClient.endpoints.VERIFY_EMAIL","description":"Verifies a user's email address by providing a token sent to the user by email. Response has status code `200` if successful.","returnType":"VerifyEmailAddressResponse","params":[{"name":"reqId","type":"string","description":"the request id","required":true,"_type":"_Paramter"},{"name":"tokenId","type":"string","description":"The email verification token to verify with.","required":false,"_type":"_Paramter"}],"_type":"_Endpoint"}],"endpointConstants":[{"constantName":"ADD_ROLES","subject":"user-service.add-roles","functionVariableName":"addRoles"},{"constantName":"CREATE_USER","subject":"user-service.create-user","functionVariableName":"createUser"},{"constantName":"DELETE_USER","subject":"user-service.delete-user","functionVariableName":"deleteUser"},{"constantName":"GET_PROFILES_BY_QUERY","subject":"user-service.get-profiles-by-query","functionVariableName":"getProfilesByQuery"},{"constantName":"GET_SCOPES","subject":"user-service.get-scopes","functionVariableName":"getScopes"},{"constantName":"GET_USER","subject":"user-service.get-user","functionVariableName":"getUser"},{"constantName":"GET_USERS_BY_QUERY","subject":"user-service.get-users-by-query","functionVariableName":"getUsersByQuery"},{"constantName":"REMOVE_ROLES","subject":"user-service.remove-roles","functionVariableName":"removeRoles"},{"constantName":"RESEND_VERIFICATION","subject":"user-service.resend-verification","functionVariableName":"resendVerification"},{"constantName":"SET_PASSWORD","subject":"user-service.set-password","functionVariableName":"setPassword"},{"constantName":"UPDATE_PASSWORD","subject":"user-service.update-password","functionVariableName":"updatePassword"},{"constantName":"UPDATE_PROFILE","subject":"user-service.update-profile","functionVariableName":"updateProfile"},{"constantName":"UPDATE_USER","subject":"user-service.update-user","functionVariableName":"updateUser"},{"constantName":"VALIDATE_PASSWORD","subject":"user-service.validate-password","functionVariableName":"validatePassword"},{"constantName":"VERIFY_EMAIL","subject":"user-service.verify-email","functionVariableName":"verifyEmail"}],"serviceName":"user-service","className":"UserServiceClient"}